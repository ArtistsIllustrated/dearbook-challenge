x-php: &php
  healthcheck:
    disable: true
  image: ${REGISTRY}/backend:latest
  networks:
    - traefik-network
  volumes:
    - backend-data:/srv/storage/app/public
  environment:
    APP_NAME: $APP_NAME
    APP_ENV: $APP_ENV
    APP_KEY: $APP_KEY
    APP_DEBUG: $APP_DEBUG
    APP_URL: $APP_URL
    API_DOMAIN: $API_DOMAIN
    LOW_VRAM_MODE: $LOW_VRAM_MODE
    QUEUE_WORKERS_COUNT: $QUEUE_WORKERS_COUNT
    ASSETS_DOMAIN: $ASSETS_DOMAIN
    HORIZON_DOMAIN: $HORIZON_DOMAIN
    COMFYUI_DOMAIN: $COMFYUI_DOMAIN
    COMFYUI_INTERNAL_URL: $COMFYUI_INTERNAL_URL
    OLLAMA_INTERNAL_URL: $OLLAMA_INTERNAL_URL
    OLLAMA_MODEL: $OLLAMA_MODEL
    OLLAMA_EMBEDDING_MODEL: $OLLAMA_EMBEDDING_MODEL
    OLLAMA_QUEUE_WORKERS_COUNT: $OLLAMA_QUEUE_WORKERS_COUNT
    COMFYUI_QUEUE_WORKERS_COUNT: $COMFYUI_QUEUE_WORKERS_COUNT
    DB_CONNECTION: $DB_CONNECTION
    DB_HOST: $DB_HOST
    DB_PORT: $DB_PORT
    DB_DATABASE: $DB_DATABASE
    DB_USERNAME: $DB_USERNAME
    DB_PASSWORD: $DB_PASSWORD
    REDIS_HOST: $REDIS_HOST
    QUEUE_CONNECTION: $QUEUE_CONNECTION
    BROADCAST_CONNECTION: $BROADCAST_CONNECTION
    REVERB_APP_ID: $REVERB_APP_ID
    REVERB_APP_KEY: $REVERB_APP_KEY
    REVERB_APP_SECRET: $REVERB_APP_SECRET
    REVERB_HOST: $REVERB_HOST
    REVERB_PORT: $REVERB_PORT
    REVERB_SCHEME: $REVERB_SCHEME

x-ollama: &ollama-node
  placement:
    constraints:
      - node.hostname == dearbook002

x-comfyui: &comfyui-node
  placement:
    constraints:
      - node.hostname == dearbook001

services:
  traefik:
    image: traefik:3.2.0
    networks:
      - traefik-network
    command: >-
      --entryPoints.web.address=:80
      --entryPoints.web.http.redirections.entrypoint.to=web-secure
      --entryPoints.web.http.redirections.entrypoint.scheme=https
      --entryPoints.web-secure.address=:443
      --api=true
      --api.dashboard=true
      --providers.swarm=true
      --providers.swarm.network=traefik-network
      --providers.swarm.exposedByDefault=false
      --providers.file.directory=/srv/configs
      --providers.file.watch=true
      --certificatesResolvers.lets-encrypt.acme.email=$EMAIL
      --certificatesResolvers.lets-encrypt.acme.storage=/srv/.certificates/acme.json
      --certificatesResolvers.lets-encrypt.acme.tlsChallenge=true
      --log.level=INFO
      --log.filepath=/srv/logs/traefik.log
    volumes:
      - /srv/traefik:/srv
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "443:443"
    deploy:
      <<: *comfyui-node
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik.rule=Host(`traefik.dearbook.fun`)
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.tls=true
        - traefik.http.routers.traefik.tls.certResolver=lets-encrypt
        - traefik.http.routers.traefik.middlewares=basic-auth@file
        - traefik.http.services.traefik.loadBalancer.server.port=8080

  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    volumes:
      - open-webui-data:/app/backend/data
    depends_on:
      - ollama
    networks:
      - traefik-network
    environment:
      - 'OLLAMA_BASE_URL=http://ollama:11434'
      - 'WEBUI_SECRET_KEY='
    deploy:
      <<: *comfyui-node
      labels:
        - traefik.enable=true
        - traefik.http.routers.open-webui.rule=Host(`open-webui.dearbook.fun`)
        - traefik.http.routers.open-webui.tls=true
        - traefik.http.routers.open-webui.tls.certResolver=lets-encrypt
        - traefik.http.routers.open-webui.middlewares=basic-auth@file
        - traefik.http.services.open-webui.loadBalancer.server.port=8080

  backend:
    <<: *php
    deploy:
      <<: *comfyui-node
      labels:
        - traefik.enable=true
        - traefik.http.routers.backend.service=backend
        - traefik.http.routers.backend.rule=Host(`api.dearbook.fun`) || Host(`assets.dearbook.fun`)
        - traefik.http.routers.backend.tls=true
        - traefik.http.routers.backend.tls.certResolver=lets-encrypt
        - traefik.http.services.backend.loadBalancer.server.port=80

        - traefik.http.routers.horizon.service=horizon
        - traefik.http.routers.horizon.rule=Host(`horizon.dearbook.fun`)
        - traefik.http.routers.horizon.tls=true
        - traefik.http.routers.horizon.tls.certResolver=lets-encrypt
        - traefik.http.routers.horizon.middlewares=basic-auth@file
        - traefik.http.services.horizon.loadBalancer.server.port=80
  queue:
    <<: *php
    command: php artisan horizon
    deploy:
      <<: *comfyui-node
      labels:
        - traefik.enable=true
        - traefik.http.routers.horizon.rule=Host(`horizon.dearbook.fun`)
        - traefik.http.routers.horizon.tls=true
        - traefik.http.routers.horizon.tls.certResolver=lets-encrypt
        - traefik.http.routers.horizon.middlewares=basic-auth@file
        - traefik.http.services.horizon.loadBalancer.server.port=80

  reverb:
    <<: *php
    command: php artisan reverb:start --debug
    deploy:
      <<: *comfyui-node
      labels:
        - traefik.enable=true
        - traefik.http.routers.reverb.entryPoints=web-secure
        - traefik.http.routers.reverb.rule=Host(`reverb.dearbook.fun`)
        - traefik.http.routers.reverb.tls=true
        - traefik.http.routers.reverb.tls.certResolver=lets-encrypt
        - traefik.http.services.reverb.loadBalancer.server.port=8080

  scheduler:
    <<: *php
    command: supercronic /srv/docker/php/config/schedule.cron
    deploy:
      <<: *comfyui-node

  ollama:
    image: ollama/ollama:0.3.14
    restart: unless-stopped
    volumes:
      - ollama-data:/root/.ollama
    networks:
      - traefik-network
    environment:
      CUDA_VISIBLE_DEVICES: 0,1
      NVIDIA_VISIBLE_DEVICES: all
    deploy:
      <<: *ollama-node

  comfyui:
    image: ${REGISTRY}/comfyui:latest
    restart: unless-stopped
    volumes:
      - comfyui-data:/home/runner
    networks:
      - traefik-network
    environment:
      CLI_ARGS: --disable-cuda-malloc
      CUDA_VISIBLE_DEVICES: 0,1
      NVIDIA_VISIBLE_DEVICES: all
    deploy:
      <<: *comfyui-node
      labels:
        - traefik.enable=true
        - traefik.http.routers.comfyui.rule=Host(`comfyui.dearbook.fun`)
        - traefik.http.routers.comfyui.tls=true
        - traefik.http.routers.comfyui.tls.certResolver=lets-encrypt
        - traefik.http.routers.comfyui.middlewares=basic-auth@file
        - traefik.http.services.comfyui.loadBalancer.server.port=8188

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - traefik-network
    volumes:
      - redis-data:/data
    deploy:
      <<: *comfyui-node

  timescaledb:
    image: timescale/timescaledb-ha:pg16
    restart: unless-stopped
    networks:
      - traefik-network
    environment:
      POSTGRES_DB: $DB_DATABASE
      POSTGRES_USER: $DB_USERNAME
      POSTGRES_PASSWORD: $DB_PASSWORD
    command: [ "postgres", "-c", "ai.ollama_host=http://ollama:11434" ]
    volumes:
      - timescaledb-data:/home/postgres/pgdata/data
    ports:
      - "5432:5432"
    deploy:
      <<: *comfyui-node

  frontend:
    image: ${REGISTRY}/frontend:latest
    restart: unless-stopped
    networks:
      - traefik-network
    deploy:
      <<: *comfyui-node
      labels:
        - traefik.enable=true
        - traefik.http.routers.frontend.rule=Host(`dearbook.fun`)
        - traefik.http.routers.frontend.tls=true
        - traefik.http.routers.frontend.tls.certResolver=lets-encrypt
        - traefik.http.services.frontend.loadBalancer.server.port=80

volumes:
  open-webui-data:
  timescaledb-data:
  redis-data:
  ollama-data:
  comfyui-data:
  backend-data:

networks:
  traefik-network:
    name: traefik-network
    external: true
    driver: overlay